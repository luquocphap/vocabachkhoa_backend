
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model USERINFO
 * 
 */
export type USERINFO = $Result.DefaultSelection<Prisma.$USERINFOPayload>
/**
 * Model VOCAB
 * 
 */
export type VOCAB = $Result.DefaultSelection<Prisma.$VOCABPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more USERINFOS
 * const uSERINFOS = await prisma.uSERINFO.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more USERINFOS
   * const uSERINFOS = await prisma.uSERINFO.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.uSERINFO`: Exposes CRUD operations for the **USERINFO** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more USERINFOS
    * const uSERINFOS = await prisma.uSERINFO.findMany()
    * ```
    */
  get uSERINFO(): Prisma.USERINFODelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vOCAB`: Exposes CRUD operations for the **VOCAB** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VOCABS
    * const vOCABS = await prisma.vOCAB.findMany()
    * ```
    */
  get vOCAB(): Prisma.VOCABDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    USERINFO: 'USERINFO',
    VOCAB: 'VOCAB'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "uSERINFO" | "vOCAB"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      USERINFO: {
        payload: Prisma.$USERINFOPayload<ExtArgs>
        fields: Prisma.USERINFOFieldRefs
        operations: {
          findUnique: {
            args: Prisma.USERINFOFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$USERINFOPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.USERINFOFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$USERINFOPayload>
          }
          findFirst: {
            args: Prisma.USERINFOFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$USERINFOPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.USERINFOFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$USERINFOPayload>
          }
          findMany: {
            args: Prisma.USERINFOFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$USERINFOPayload>[]
          }
          create: {
            args: Prisma.USERINFOCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$USERINFOPayload>
          }
          createMany: {
            args: Prisma.USERINFOCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.USERINFODeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$USERINFOPayload>
          }
          update: {
            args: Prisma.USERINFOUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$USERINFOPayload>
          }
          deleteMany: {
            args: Prisma.USERINFODeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.USERINFOUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.USERINFOUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$USERINFOPayload>
          }
          aggregate: {
            args: Prisma.USERINFOAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUSERINFO>
          }
          groupBy: {
            args: Prisma.USERINFOGroupByArgs<ExtArgs>
            result: $Utils.Optional<USERINFOGroupByOutputType>[]
          }
          count: {
            args: Prisma.USERINFOCountArgs<ExtArgs>
            result: $Utils.Optional<USERINFOCountAggregateOutputType> | number
          }
        }
      }
      VOCAB: {
        payload: Prisma.$VOCABPayload<ExtArgs>
        fields: Prisma.VOCABFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VOCABFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VOCABPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VOCABFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VOCABPayload>
          }
          findFirst: {
            args: Prisma.VOCABFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VOCABPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VOCABFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VOCABPayload>
          }
          findMany: {
            args: Prisma.VOCABFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VOCABPayload>[]
          }
          create: {
            args: Prisma.VOCABCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VOCABPayload>
          }
          createMany: {
            args: Prisma.VOCABCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VOCABDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VOCABPayload>
          }
          update: {
            args: Prisma.VOCABUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VOCABPayload>
          }
          deleteMany: {
            args: Prisma.VOCABDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VOCABUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VOCABUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VOCABPayload>
          }
          aggregate: {
            args: Prisma.VOCABAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVOCAB>
          }
          groupBy: {
            args: Prisma.VOCABGroupByArgs<ExtArgs>
            result: $Utils.Optional<VOCABGroupByOutputType>[]
          }
          count: {
            args: Prisma.VOCABCountArgs<ExtArgs>
            result: $Utils.Optional<VOCABCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    uSERINFO?: USERINFOOmit
    vOCAB?: VOCABOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type USERINFOCountOutputType
   */

  export type USERINFOCountOutputType = {
    VOCAB: number
  }

  export type USERINFOCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    VOCAB?: boolean | USERINFOCountOutputTypeCountVOCABArgs
  }

  // Custom InputTypes
  /**
   * USERINFOCountOutputType without action
   */
  export type USERINFOCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the USERINFOCountOutputType
     */
    select?: USERINFOCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * USERINFOCountOutputType without action
   */
  export type USERINFOCountOutputTypeCountVOCABArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VOCABWhereInput
  }


  /**
   * Models
   */

  /**
   * Model USERINFO
   */

  export type AggregateUSERINFO = {
    _count: USERINFOCountAggregateOutputType | null
    _avg: USERINFOAvgAggregateOutputType | null
    _sum: USERINFOSumAggregateOutputType | null
    _min: USERINFOMinAggregateOutputType | null
    _max: USERINFOMaxAggregateOutputType | null
  }

  export type USERINFOAvgAggregateOutputType = {
    U_ID: number | null
  }

  export type USERINFOSumAggregateOutputType = {
    U_ID: number | null
  }

  export type USERINFOMinAggregateOutputType = {
    U_ID: number | null
    USERNAME: string | null
    PWord: string | null
  }

  export type USERINFOMaxAggregateOutputType = {
    U_ID: number | null
    USERNAME: string | null
    PWord: string | null
  }

  export type USERINFOCountAggregateOutputType = {
    U_ID: number
    USERNAME: number
    PWord: number
    _all: number
  }


  export type USERINFOAvgAggregateInputType = {
    U_ID?: true
  }

  export type USERINFOSumAggregateInputType = {
    U_ID?: true
  }

  export type USERINFOMinAggregateInputType = {
    U_ID?: true
    USERNAME?: true
    PWord?: true
  }

  export type USERINFOMaxAggregateInputType = {
    U_ID?: true
    USERNAME?: true
    PWord?: true
  }

  export type USERINFOCountAggregateInputType = {
    U_ID?: true
    USERNAME?: true
    PWord?: true
    _all?: true
  }

  export type USERINFOAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which USERINFO to aggregate.
     */
    where?: USERINFOWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of USERINFOS to fetch.
     */
    orderBy?: USERINFOOrderByWithRelationInput | USERINFOOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: USERINFOWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` USERINFOS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` USERINFOS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned USERINFOS
    **/
    _count?: true | USERINFOCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: USERINFOAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: USERINFOSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: USERINFOMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: USERINFOMaxAggregateInputType
  }

  export type GetUSERINFOAggregateType<T extends USERINFOAggregateArgs> = {
        [P in keyof T & keyof AggregateUSERINFO]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUSERINFO[P]>
      : GetScalarType<T[P], AggregateUSERINFO[P]>
  }




  export type USERINFOGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: USERINFOWhereInput
    orderBy?: USERINFOOrderByWithAggregationInput | USERINFOOrderByWithAggregationInput[]
    by: USERINFOScalarFieldEnum[] | USERINFOScalarFieldEnum
    having?: USERINFOScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: USERINFOCountAggregateInputType | true
    _avg?: USERINFOAvgAggregateInputType
    _sum?: USERINFOSumAggregateInputType
    _min?: USERINFOMinAggregateInputType
    _max?: USERINFOMaxAggregateInputType
  }

  export type USERINFOGroupByOutputType = {
    U_ID: number
    USERNAME: string
    PWord: string
    _count: USERINFOCountAggregateOutputType | null
    _avg: USERINFOAvgAggregateOutputType | null
    _sum: USERINFOSumAggregateOutputType | null
    _min: USERINFOMinAggregateOutputType | null
    _max: USERINFOMaxAggregateOutputType | null
  }

  type GetUSERINFOGroupByPayload<T extends USERINFOGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<USERINFOGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof USERINFOGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], USERINFOGroupByOutputType[P]>
            : GetScalarType<T[P], USERINFOGroupByOutputType[P]>
        }
      >
    >


  export type USERINFOSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    U_ID?: boolean
    USERNAME?: boolean
    PWord?: boolean
    VOCAB?: boolean | USERINFO$VOCABArgs<ExtArgs>
    _count?: boolean | USERINFOCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["uSERINFO"]>



  export type USERINFOSelectScalar = {
    U_ID?: boolean
    USERNAME?: boolean
    PWord?: boolean
  }

  export type USERINFOOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"U_ID" | "USERNAME" | "PWord", ExtArgs["result"]["uSERINFO"]>
  export type USERINFOInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    VOCAB?: boolean | USERINFO$VOCABArgs<ExtArgs>
    _count?: boolean | USERINFOCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $USERINFOPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "USERINFO"
    objects: {
      VOCAB: Prisma.$VOCABPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      U_ID: number
      USERNAME: string
      PWord: string
    }, ExtArgs["result"]["uSERINFO"]>
    composites: {}
  }

  type USERINFOGetPayload<S extends boolean | null | undefined | USERINFODefaultArgs> = $Result.GetResult<Prisma.$USERINFOPayload, S>

  type USERINFOCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<USERINFOFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: USERINFOCountAggregateInputType | true
    }

  export interface USERINFODelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['USERINFO'], meta: { name: 'USERINFO' } }
    /**
     * Find zero or one USERINFO that matches the filter.
     * @param {USERINFOFindUniqueArgs} args - Arguments to find a USERINFO
     * @example
     * // Get one USERINFO
     * const uSERINFO = await prisma.uSERINFO.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends USERINFOFindUniqueArgs>(args: SelectSubset<T, USERINFOFindUniqueArgs<ExtArgs>>): Prisma__USERINFOClient<$Result.GetResult<Prisma.$USERINFOPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one USERINFO that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {USERINFOFindUniqueOrThrowArgs} args - Arguments to find a USERINFO
     * @example
     * // Get one USERINFO
     * const uSERINFO = await prisma.uSERINFO.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends USERINFOFindUniqueOrThrowArgs>(args: SelectSubset<T, USERINFOFindUniqueOrThrowArgs<ExtArgs>>): Prisma__USERINFOClient<$Result.GetResult<Prisma.$USERINFOPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first USERINFO that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {USERINFOFindFirstArgs} args - Arguments to find a USERINFO
     * @example
     * // Get one USERINFO
     * const uSERINFO = await prisma.uSERINFO.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends USERINFOFindFirstArgs>(args?: SelectSubset<T, USERINFOFindFirstArgs<ExtArgs>>): Prisma__USERINFOClient<$Result.GetResult<Prisma.$USERINFOPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first USERINFO that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {USERINFOFindFirstOrThrowArgs} args - Arguments to find a USERINFO
     * @example
     * // Get one USERINFO
     * const uSERINFO = await prisma.uSERINFO.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends USERINFOFindFirstOrThrowArgs>(args?: SelectSubset<T, USERINFOFindFirstOrThrowArgs<ExtArgs>>): Prisma__USERINFOClient<$Result.GetResult<Prisma.$USERINFOPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more USERINFOS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {USERINFOFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all USERINFOS
     * const uSERINFOS = await prisma.uSERINFO.findMany()
     * 
     * // Get first 10 USERINFOS
     * const uSERINFOS = await prisma.uSERINFO.findMany({ take: 10 })
     * 
     * // Only select the `U_ID`
     * const uSERINFOWithU_IDOnly = await prisma.uSERINFO.findMany({ select: { U_ID: true } })
     * 
     */
    findMany<T extends USERINFOFindManyArgs>(args?: SelectSubset<T, USERINFOFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$USERINFOPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a USERINFO.
     * @param {USERINFOCreateArgs} args - Arguments to create a USERINFO.
     * @example
     * // Create one USERINFO
     * const USERINFO = await prisma.uSERINFO.create({
     *   data: {
     *     // ... data to create a USERINFO
     *   }
     * })
     * 
     */
    create<T extends USERINFOCreateArgs>(args: SelectSubset<T, USERINFOCreateArgs<ExtArgs>>): Prisma__USERINFOClient<$Result.GetResult<Prisma.$USERINFOPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many USERINFOS.
     * @param {USERINFOCreateManyArgs} args - Arguments to create many USERINFOS.
     * @example
     * // Create many USERINFOS
     * const uSERINFO = await prisma.uSERINFO.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends USERINFOCreateManyArgs>(args?: SelectSubset<T, USERINFOCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a USERINFO.
     * @param {USERINFODeleteArgs} args - Arguments to delete one USERINFO.
     * @example
     * // Delete one USERINFO
     * const USERINFO = await prisma.uSERINFO.delete({
     *   where: {
     *     // ... filter to delete one USERINFO
     *   }
     * })
     * 
     */
    delete<T extends USERINFODeleteArgs>(args: SelectSubset<T, USERINFODeleteArgs<ExtArgs>>): Prisma__USERINFOClient<$Result.GetResult<Prisma.$USERINFOPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one USERINFO.
     * @param {USERINFOUpdateArgs} args - Arguments to update one USERINFO.
     * @example
     * // Update one USERINFO
     * const uSERINFO = await prisma.uSERINFO.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends USERINFOUpdateArgs>(args: SelectSubset<T, USERINFOUpdateArgs<ExtArgs>>): Prisma__USERINFOClient<$Result.GetResult<Prisma.$USERINFOPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more USERINFOS.
     * @param {USERINFODeleteManyArgs} args - Arguments to filter USERINFOS to delete.
     * @example
     * // Delete a few USERINFOS
     * const { count } = await prisma.uSERINFO.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends USERINFODeleteManyArgs>(args?: SelectSubset<T, USERINFODeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more USERINFOS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {USERINFOUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many USERINFOS
     * const uSERINFO = await prisma.uSERINFO.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends USERINFOUpdateManyArgs>(args: SelectSubset<T, USERINFOUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one USERINFO.
     * @param {USERINFOUpsertArgs} args - Arguments to update or create a USERINFO.
     * @example
     * // Update or create a USERINFO
     * const uSERINFO = await prisma.uSERINFO.upsert({
     *   create: {
     *     // ... data to create a USERINFO
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the USERINFO we want to update
     *   }
     * })
     */
    upsert<T extends USERINFOUpsertArgs>(args: SelectSubset<T, USERINFOUpsertArgs<ExtArgs>>): Prisma__USERINFOClient<$Result.GetResult<Prisma.$USERINFOPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of USERINFOS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {USERINFOCountArgs} args - Arguments to filter USERINFOS to count.
     * @example
     * // Count the number of USERINFOS
     * const count = await prisma.uSERINFO.count({
     *   where: {
     *     // ... the filter for the USERINFOS we want to count
     *   }
     * })
    **/
    count<T extends USERINFOCountArgs>(
      args?: Subset<T, USERINFOCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], USERINFOCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a USERINFO.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {USERINFOAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends USERINFOAggregateArgs>(args: Subset<T, USERINFOAggregateArgs>): Prisma.PrismaPromise<GetUSERINFOAggregateType<T>>

    /**
     * Group by USERINFO.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {USERINFOGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends USERINFOGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: USERINFOGroupByArgs['orderBy'] }
        : { orderBy?: USERINFOGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, USERINFOGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUSERINFOGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the USERINFO model
   */
  readonly fields: USERINFOFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for USERINFO.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__USERINFOClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    VOCAB<T extends USERINFO$VOCABArgs<ExtArgs> = {}>(args?: Subset<T, USERINFO$VOCABArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VOCABPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the USERINFO model
   */
  interface USERINFOFieldRefs {
    readonly U_ID: FieldRef<"USERINFO", 'Int'>
    readonly USERNAME: FieldRef<"USERINFO", 'String'>
    readonly PWord: FieldRef<"USERINFO", 'String'>
  }
    

  // Custom InputTypes
  /**
   * USERINFO findUnique
   */
  export type USERINFOFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the USERINFO
     */
    select?: USERINFOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the USERINFO
     */
    omit?: USERINFOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: USERINFOInclude<ExtArgs> | null
    /**
     * Filter, which USERINFO to fetch.
     */
    where: USERINFOWhereUniqueInput
  }

  /**
   * USERINFO findUniqueOrThrow
   */
  export type USERINFOFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the USERINFO
     */
    select?: USERINFOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the USERINFO
     */
    omit?: USERINFOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: USERINFOInclude<ExtArgs> | null
    /**
     * Filter, which USERINFO to fetch.
     */
    where: USERINFOWhereUniqueInput
  }

  /**
   * USERINFO findFirst
   */
  export type USERINFOFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the USERINFO
     */
    select?: USERINFOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the USERINFO
     */
    omit?: USERINFOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: USERINFOInclude<ExtArgs> | null
    /**
     * Filter, which USERINFO to fetch.
     */
    where?: USERINFOWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of USERINFOS to fetch.
     */
    orderBy?: USERINFOOrderByWithRelationInput | USERINFOOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for USERINFOS.
     */
    cursor?: USERINFOWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` USERINFOS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` USERINFOS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of USERINFOS.
     */
    distinct?: USERINFOScalarFieldEnum | USERINFOScalarFieldEnum[]
  }

  /**
   * USERINFO findFirstOrThrow
   */
  export type USERINFOFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the USERINFO
     */
    select?: USERINFOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the USERINFO
     */
    omit?: USERINFOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: USERINFOInclude<ExtArgs> | null
    /**
     * Filter, which USERINFO to fetch.
     */
    where?: USERINFOWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of USERINFOS to fetch.
     */
    orderBy?: USERINFOOrderByWithRelationInput | USERINFOOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for USERINFOS.
     */
    cursor?: USERINFOWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` USERINFOS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` USERINFOS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of USERINFOS.
     */
    distinct?: USERINFOScalarFieldEnum | USERINFOScalarFieldEnum[]
  }

  /**
   * USERINFO findMany
   */
  export type USERINFOFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the USERINFO
     */
    select?: USERINFOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the USERINFO
     */
    omit?: USERINFOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: USERINFOInclude<ExtArgs> | null
    /**
     * Filter, which USERINFOS to fetch.
     */
    where?: USERINFOWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of USERINFOS to fetch.
     */
    orderBy?: USERINFOOrderByWithRelationInput | USERINFOOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing USERINFOS.
     */
    cursor?: USERINFOWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` USERINFOS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` USERINFOS.
     */
    skip?: number
    distinct?: USERINFOScalarFieldEnum | USERINFOScalarFieldEnum[]
  }

  /**
   * USERINFO create
   */
  export type USERINFOCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the USERINFO
     */
    select?: USERINFOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the USERINFO
     */
    omit?: USERINFOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: USERINFOInclude<ExtArgs> | null
    /**
     * The data needed to create a USERINFO.
     */
    data: XOR<USERINFOCreateInput, USERINFOUncheckedCreateInput>
  }

  /**
   * USERINFO createMany
   */
  export type USERINFOCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many USERINFOS.
     */
    data: USERINFOCreateManyInput | USERINFOCreateManyInput[]
  }

  /**
   * USERINFO update
   */
  export type USERINFOUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the USERINFO
     */
    select?: USERINFOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the USERINFO
     */
    omit?: USERINFOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: USERINFOInclude<ExtArgs> | null
    /**
     * The data needed to update a USERINFO.
     */
    data: XOR<USERINFOUpdateInput, USERINFOUncheckedUpdateInput>
    /**
     * Choose, which USERINFO to update.
     */
    where: USERINFOWhereUniqueInput
  }

  /**
   * USERINFO updateMany
   */
  export type USERINFOUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update USERINFOS.
     */
    data: XOR<USERINFOUpdateManyMutationInput, USERINFOUncheckedUpdateManyInput>
    /**
     * Filter which USERINFOS to update
     */
    where?: USERINFOWhereInput
    /**
     * Limit how many USERINFOS to update.
     */
    limit?: number
  }

  /**
   * USERINFO upsert
   */
  export type USERINFOUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the USERINFO
     */
    select?: USERINFOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the USERINFO
     */
    omit?: USERINFOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: USERINFOInclude<ExtArgs> | null
    /**
     * The filter to search for the USERINFO to update in case it exists.
     */
    where: USERINFOWhereUniqueInput
    /**
     * In case the USERINFO found by the `where` argument doesn't exist, create a new USERINFO with this data.
     */
    create: XOR<USERINFOCreateInput, USERINFOUncheckedCreateInput>
    /**
     * In case the USERINFO was found with the provided `where` argument, update it with this data.
     */
    update: XOR<USERINFOUpdateInput, USERINFOUncheckedUpdateInput>
  }

  /**
   * USERINFO delete
   */
  export type USERINFODeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the USERINFO
     */
    select?: USERINFOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the USERINFO
     */
    omit?: USERINFOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: USERINFOInclude<ExtArgs> | null
    /**
     * Filter which USERINFO to delete.
     */
    where: USERINFOWhereUniqueInput
  }

  /**
   * USERINFO deleteMany
   */
  export type USERINFODeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which USERINFOS to delete
     */
    where?: USERINFOWhereInput
    /**
     * Limit how many USERINFOS to delete.
     */
    limit?: number
  }

  /**
   * USERINFO.VOCAB
   */
  export type USERINFO$VOCABArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VOCAB
     */
    select?: VOCABSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VOCAB
     */
    omit?: VOCABOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VOCABInclude<ExtArgs> | null
    where?: VOCABWhereInput
    orderBy?: VOCABOrderByWithRelationInput | VOCABOrderByWithRelationInput[]
    cursor?: VOCABWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VOCABScalarFieldEnum | VOCABScalarFieldEnum[]
  }

  /**
   * USERINFO without action
   */
  export type USERINFODefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the USERINFO
     */
    select?: USERINFOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the USERINFO
     */
    omit?: USERINFOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: USERINFOInclude<ExtArgs> | null
  }


  /**
   * Model VOCAB
   */

  export type AggregateVOCAB = {
    _count: VOCABCountAggregateOutputType | null
    _avg: VOCABAvgAggregateOutputType | null
    _sum: VOCABSumAggregateOutputType | null
    _min: VOCABMinAggregateOutputType | null
    _max: VOCABMaxAggregateOutputType | null
  }

  export type VOCABAvgAggregateOutputType = {
    U_ID: number | null
  }

  export type VOCABSumAggregateOutputType = {
    U_ID: number | null
  }

  export type VOCABMinAggregateOutputType = {
    U_ID: number | null
    WORD: string | null
    MEANINGS: string | null
  }

  export type VOCABMaxAggregateOutputType = {
    U_ID: number | null
    WORD: string | null
    MEANINGS: string | null
  }

  export type VOCABCountAggregateOutputType = {
    U_ID: number
    WORD: number
    MEANINGS: number
    _all: number
  }


  export type VOCABAvgAggregateInputType = {
    U_ID?: true
  }

  export type VOCABSumAggregateInputType = {
    U_ID?: true
  }

  export type VOCABMinAggregateInputType = {
    U_ID?: true
    WORD?: true
    MEANINGS?: true
  }

  export type VOCABMaxAggregateInputType = {
    U_ID?: true
    WORD?: true
    MEANINGS?: true
  }

  export type VOCABCountAggregateInputType = {
    U_ID?: true
    WORD?: true
    MEANINGS?: true
    _all?: true
  }

  export type VOCABAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VOCAB to aggregate.
     */
    where?: VOCABWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VOCABS to fetch.
     */
    orderBy?: VOCABOrderByWithRelationInput | VOCABOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VOCABWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VOCABS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VOCABS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VOCABS
    **/
    _count?: true | VOCABCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VOCABAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VOCABSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VOCABMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VOCABMaxAggregateInputType
  }

  export type GetVOCABAggregateType<T extends VOCABAggregateArgs> = {
        [P in keyof T & keyof AggregateVOCAB]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVOCAB[P]>
      : GetScalarType<T[P], AggregateVOCAB[P]>
  }




  export type VOCABGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VOCABWhereInput
    orderBy?: VOCABOrderByWithAggregationInput | VOCABOrderByWithAggregationInput[]
    by: VOCABScalarFieldEnum[] | VOCABScalarFieldEnum
    having?: VOCABScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VOCABCountAggregateInputType | true
    _avg?: VOCABAvgAggregateInputType
    _sum?: VOCABSumAggregateInputType
    _min?: VOCABMinAggregateInputType
    _max?: VOCABMaxAggregateInputType
  }

  export type VOCABGroupByOutputType = {
    U_ID: number
    WORD: string
    MEANINGS: string
    _count: VOCABCountAggregateOutputType | null
    _avg: VOCABAvgAggregateOutputType | null
    _sum: VOCABSumAggregateOutputType | null
    _min: VOCABMinAggregateOutputType | null
    _max: VOCABMaxAggregateOutputType | null
  }

  type GetVOCABGroupByPayload<T extends VOCABGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VOCABGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VOCABGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VOCABGroupByOutputType[P]>
            : GetScalarType<T[P], VOCABGroupByOutputType[P]>
        }
      >
    >


  export type VOCABSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    U_ID?: boolean
    WORD?: boolean
    MEANINGS?: boolean
    USERINFO?: boolean | USERINFODefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vOCAB"]>



  export type VOCABSelectScalar = {
    U_ID?: boolean
    WORD?: boolean
    MEANINGS?: boolean
  }

  export type VOCABOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"U_ID" | "WORD" | "MEANINGS", ExtArgs["result"]["vOCAB"]>
  export type VOCABInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    USERINFO?: boolean | USERINFODefaultArgs<ExtArgs>
  }

  export type $VOCABPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VOCAB"
    objects: {
      USERINFO: Prisma.$USERINFOPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      U_ID: number
      WORD: string
      MEANINGS: string
    }, ExtArgs["result"]["vOCAB"]>
    composites: {}
  }

  type VOCABGetPayload<S extends boolean | null | undefined | VOCABDefaultArgs> = $Result.GetResult<Prisma.$VOCABPayload, S>

  type VOCABCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VOCABFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VOCABCountAggregateInputType | true
    }

  export interface VOCABDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VOCAB'], meta: { name: 'VOCAB' } }
    /**
     * Find zero or one VOCAB that matches the filter.
     * @param {VOCABFindUniqueArgs} args - Arguments to find a VOCAB
     * @example
     * // Get one VOCAB
     * const vOCAB = await prisma.vOCAB.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VOCABFindUniqueArgs>(args: SelectSubset<T, VOCABFindUniqueArgs<ExtArgs>>): Prisma__VOCABClient<$Result.GetResult<Prisma.$VOCABPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VOCAB that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VOCABFindUniqueOrThrowArgs} args - Arguments to find a VOCAB
     * @example
     * // Get one VOCAB
     * const vOCAB = await prisma.vOCAB.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VOCABFindUniqueOrThrowArgs>(args: SelectSubset<T, VOCABFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VOCABClient<$Result.GetResult<Prisma.$VOCABPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VOCAB that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VOCABFindFirstArgs} args - Arguments to find a VOCAB
     * @example
     * // Get one VOCAB
     * const vOCAB = await prisma.vOCAB.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VOCABFindFirstArgs>(args?: SelectSubset<T, VOCABFindFirstArgs<ExtArgs>>): Prisma__VOCABClient<$Result.GetResult<Prisma.$VOCABPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VOCAB that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VOCABFindFirstOrThrowArgs} args - Arguments to find a VOCAB
     * @example
     * // Get one VOCAB
     * const vOCAB = await prisma.vOCAB.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VOCABFindFirstOrThrowArgs>(args?: SelectSubset<T, VOCABFindFirstOrThrowArgs<ExtArgs>>): Prisma__VOCABClient<$Result.GetResult<Prisma.$VOCABPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VOCABS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VOCABFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VOCABS
     * const vOCABS = await prisma.vOCAB.findMany()
     * 
     * // Get first 10 VOCABS
     * const vOCABS = await prisma.vOCAB.findMany({ take: 10 })
     * 
     * // Only select the `U_ID`
     * const vOCABWithU_IDOnly = await prisma.vOCAB.findMany({ select: { U_ID: true } })
     * 
     */
    findMany<T extends VOCABFindManyArgs>(args?: SelectSubset<T, VOCABFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VOCABPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VOCAB.
     * @param {VOCABCreateArgs} args - Arguments to create a VOCAB.
     * @example
     * // Create one VOCAB
     * const VOCAB = await prisma.vOCAB.create({
     *   data: {
     *     // ... data to create a VOCAB
     *   }
     * })
     * 
     */
    create<T extends VOCABCreateArgs>(args: SelectSubset<T, VOCABCreateArgs<ExtArgs>>): Prisma__VOCABClient<$Result.GetResult<Prisma.$VOCABPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VOCABS.
     * @param {VOCABCreateManyArgs} args - Arguments to create many VOCABS.
     * @example
     * // Create many VOCABS
     * const vOCAB = await prisma.vOCAB.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VOCABCreateManyArgs>(args?: SelectSubset<T, VOCABCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VOCAB.
     * @param {VOCABDeleteArgs} args - Arguments to delete one VOCAB.
     * @example
     * // Delete one VOCAB
     * const VOCAB = await prisma.vOCAB.delete({
     *   where: {
     *     // ... filter to delete one VOCAB
     *   }
     * })
     * 
     */
    delete<T extends VOCABDeleteArgs>(args: SelectSubset<T, VOCABDeleteArgs<ExtArgs>>): Prisma__VOCABClient<$Result.GetResult<Prisma.$VOCABPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VOCAB.
     * @param {VOCABUpdateArgs} args - Arguments to update one VOCAB.
     * @example
     * // Update one VOCAB
     * const vOCAB = await prisma.vOCAB.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VOCABUpdateArgs>(args: SelectSubset<T, VOCABUpdateArgs<ExtArgs>>): Prisma__VOCABClient<$Result.GetResult<Prisma.$VOCABPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VOCABS.
     * @param {VOCABDeleteManyArgs} args - Arguments to filter VOCABS to delete.
     * @example
     * // Delete a few VOCABS
     * const { count } = await prisma.vOCAB.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VOCABDeleteManyArgs>(args?: SelectSubset<T, VOCABDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VOCABS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VOCABUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VOCABS
     * const vOCAB = await prisma.vOCAB.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VOCABUpdateManyArgs>(args: SelectSubset<T, VOCABUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VOCAB.
     * @param {VOCABUpsertArgs} args - Arguments to update or create a VOCAB.
     * @example
     * // Update or create a VOCAB
     * const vOCAB = await prisma.vOCAB.upsert({
     *   create: {
     *     // ... data to create a VOCAB
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VOCAB we want to update
     *   }
     * })
     */
    upsert<T extends VOCABUpsertArgs>(args: SelectSubset<T, VOCABUpsertArgs<ExtArgs>>): Prisma__VOCABClient<$Result.GetResult<Prisma.$VOCABPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VOCABS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VOCABCountArgs} args - Arguments to filter VOCABS to count.
     * @example
     * // Count the number of VOCABS
     * const count = await prisma.vOCAB.count({
     *   where: {
     *     // ... the filter for the VOCABS we want to count
     *   }
     * })
    **/
    count<T extends VOCABCountArgs>(
      args?: Subset<T, VOCABCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VOCABCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VOCAB.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VOCABAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VOCABAggregateArgs>(args: Subset<T, VOCABAggregateArgs>): Prisma.PrismaPromise<GetVOCABAggregateType<T>>

    /**
     * Group by VOCAB.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VOCABGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VOCABGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VOCABGroupByArgs['orderBy'] }
        : { orderBy?: VOCABGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VOCABGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVOCABGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VOCAB model
   */
  readonly fields: VOCABFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VOCAB.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VOCABClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    USERINFO<T extends USERINFODefaultArgs<ExtArgs> = {}>(args?: Subset<T, USERINFODefaultArgs<ExtArgs>>): Prisma__USERINFOClient<$Result.GetResult<Prisma.$USERINFOPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VOCAB model
   */
  interface VOCABFieldRefs {
    readonly U_ID: FieldRef<"VOCAB", 'Int'>
    readonly WORD: FieldRef<"VOCAB", 'String'>
    readonly MEANINGS: FieldRef<"VOCAB", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VOCAB findUnique
   */
  export type VOCABFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VOCAB
     */
    select?: VOCABSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VOCAB
     */
    omit?: VOCABOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VOCABInclude<ExtArgs> | null
    /**
     * Filter, which VOCAB to fetch.
     */
    where: VOCABWhereUniqueInput
  }

  /**
   * VOCAB findUniqueOrThrow
   */
  export type VOCABFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VOCAB
     */
    select?: VOCABSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VOCAB
     */
    omit?: VOCABOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VOCABInclude<ExtArgs> | null
    /**
     * Filter, which VOCAB to fetch.
     */
    where: VOCABWhereUniqueInput
  }

  /**
   * VOCAB findFirst
   */
  export type VOCABFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VOCAB
     */
    select?: VOCABSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VOCAB
     */
    omit?: VOCABOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VOCABInclude<ExtArgs> | null
    /**
     * Filter, which VOCAB to fetch.
     */
    where?: VOCABWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VOCABS to fetch.
     */
    orderBy?: VOCABOrderByWithRelationInput | VOCABOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VOCABS.
     */
    cursor?: VOCABWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VOCABS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VOCABS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VOCABS.
     */
    distinct?: VOCABScalarFieldEnum | VOCABScalarFieldEnum[]
  }

  /**
   * VOCAB findFirstOrThrow
   */
  export type VOCABFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VOCAB
     */
    select?: VOCABSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VOCAB
     */
    omit?: VOCABOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VOCABInclude<ExtArgs> | null
    /**
     * Filter, which VOCAB to fetch.
     */
    where?: VOCABWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VOCABS to fetch.
     */
    orderBy?: VOCABOrderByWithRelationInput | VOCABOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VOCABS.
     */
    cursor?: VOCABWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VOCABS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VOCABS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VOCABS.
     */
    distinct?: VOCABScalarFieldEnum | VOCABScalarFieldEnum[]
  }

  /**
   * VOCAB findMany
   */
  export type VOCABFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VOCAB
     */
    select?: VOCABSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VOCAB
     */
    omit?: VOCABOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VOCABInclude<ExtArgs> | null
    /**
     * Filter, which VOCABS to fetch.
     */
    where?: VOCABWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VOCABS to fetch.
     */
    orderBy?: VOCABOrderByWithRelationInput | VOCABOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VOCABS.
     */
    cursor?: VOCABWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VOCABS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VOCABS.
     */
    skip?: number
    distinct?: VOCABScalarFieldEnum | VOCABScalarFieldEnum[]
  }

  /**
   * VOCAB create
   */
  export type VOCABCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VOCAB
     */
    select?: VOCABSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VOCAB
     */
    omit?: VOCABOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VOCABInclude<ExtArgs> | null
    /**
     * The data needed to create a VOCAB.
     */
    data: XOR<VOCABCreateInput, VOCABUncheckedCreateInput>
  }

  /**
   * VOCAB createMany
   */
  export type VOCABCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VOCABS.
     */
    data: VOCABCreateManyInput | VOCABCreateManyInput[]
  }

  /**
   * VOCAB update
   */
  export type VOCABUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VOCAB
     */
    select?: VOCABSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VOCAB
     */
    omit?: VOCABOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VOCABInclude<ExtArgs> | null
    /**
     * The data needed to update a VOCAB.
     */
    data: XOR<VOCABUpdateInput, VOCABUncheckedUpdateInput>
    /**
     * Choose, which VOCAB to update.
     */
    where: VOCABWhereUniqueInput
  }

  /**
   * VOCAB updateMany
   */
  export type VOCABUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VOCABS.
     */
    data: XOR<VOCABUpdateManyMutationInput, VOCABUncheckedUpdateManyInput>
    /**
     * Filter which VOCABS to update
     */
    where?: VOCABWhereInput
    /**
     * Limit how many VOCABS to update.
     */
    limit?: number
  }

  /**
   * VOCAB upsert
   */
  export type VOCABUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VOCAB
     */
    select?: VOCABSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VOCAB
     */
    omit?: VOCABOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VOCABInclude<ExtArgs> | null
    /**
     * The filter to search for the VOCAB to update in case it exists.
     */
    where: VOCABWhereUniqueInput
    /**
     * In case the VOCAB found by the `where` argument doesn't exist, create a new VOCAB with this data.
     */
    create: XOR<VOCABCreateInput, VOCABUncheckedCreateInput>
    /**
     * In case the VOCAB was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VOCABUpdateInput, VOCABUncheckedUpdateInput>
  }

  /**
   * VOCAB delete
   */
  export type VOCABDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VOCAB
     */
    select?: VOCABSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VOCAB
     */
    omit?: VOCABOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VOCABInclude<ExtArgs> | null
    /**
     * Filter which VOCAB to delete.
     */
    where: VOCABWhereUniqueInput
  }

  /**
   * VOCAB deleteMany
   */
  export type VOCABDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VOCABS to delete
     */
    where?: VOCABWhereInput
    /**
     * Limit how many VOCABS to delete.
     */
    limit?: number
  }

  /**
   * VOCAB without action
   */
  export type VOCABDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VOCAB
     */
    select?: VOCABSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VOCAB
     */
    omit?: VOCABOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VOCABInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const USERINFOScalarFieldEnum: {
    U_ID: 'U_ID',
    USERNAME: 'USERNAME',
    PWord: 'PWord'
  };

  export type USERINFOScalarFieldEnum = (typeof USERINFOScalarFieldEnum)[keyof typeof USERINFOScalarFieldEnum]


  export const VOCABScalarFieldEnum: {
    U_ID: 'U_ID',
    WORD: 'WORD',
    MEANINGS: 'MEANINGS'
  };

  export type VOCABScalarFieldEnum = (typeof VOCABScalarFieldEnum)[keyof typeof VOCABScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type USERINFOWhereInput = {
    AND?: USERINFOWhereInput | USERINFOWhereInput[]
    OR?: USERINFOWhereInput[]
    NOT?: USERINFOWhereInput | USERINFOWhereInput[]
    U_ID?: IntFilter<"USERINFO"> | number
    USERNAME?: StringFilter<"USERINFO"> | string
    PWord?: StringFilter<"USERINFO"> | string
    VOCAB?: VOCABListRelationFilter
  }

  export type USERINFOOrderByWithRelationInput = {
    U_ID?: SortOrder
    USERNAME?: SortOrder
    PWord?: SortOrder
    VOCAB?: VOCABOrderByRelationAggregateInput
  }

  export type USERINFOWhereUniqueInput = Prisma.AtLeast<{
    U_ID?: number
    AND?: USERINFOWhereInput | USERINFOWhereInput[]
    OR?: USERINFOWhereInput[]
    NOT?: USERINFOWhereInput | USERINFOWhereInput[]
    USERNAME?: StringFilter<"USERINFO"> | string
    PWord?: StringFilter<"USERINFO"> | string
    VOCAB?: VOCABListRelationFilter
  }, "U_ID">

  export type USERINFOOrderByWithAggregationInput = {
    U_ID?: SortOrder
    USERNAME?: SortOrder
    PWord?: SortOrder
    _count?: USERINFOCountOrderByAggregateInput
    _avg?: USERINFOAvgOrderByAggregateInput
    _max?: USERINFOMaxOrderByAggregateInput
    _min?: USERINFOMinOrderByAggregateInput
    _sum?: USERINFOSumOrderByAggregateInput
  }

  export type USERINFOScalarWhereWithAggregatesInput = {
    AND?: USERINFOScalarWhereWithAggregatesInput | USERINFOScalarWhereWithAggregatesInput[]
    OR?: USERINFOScalarWhereWithAggregatesInput[]
    NOT?: USERINFOScalarWhereWithAggregatesInput | USERINFOScalarWhereWithAggregatesInput[]
    U_ID?: IntWithAggregatesFilter<"USERINFO"> | number
    USERNAME?: StringWithAggregatesFilter<"USERINFO"> | string
    PWord?: StringWithAggregatesFilter<"USERINFO"> | string
  }

  export type VOCABWhereInput = {
    AND?: VOCABWhereInput | VOCABWhereInput[]
    OR?: VOCABWhereInput[]
    NOT?: VOCABWhereInput | VOCABWhereInput[]
    U_ID?: IntFilter<"VOCAB"> | number
    WORD?: StringFilter<"VOCAB"> | string
    MEANINGS?: StringFilter<"VOCAB"> | string
    USERINFO?: XOR<USERINFOScalarRelationFilter, USERINFOWhereInput>
  }

  export type VOCABOrderByWithRelationInput = {
    U_ID?: SortOrder
    WORD?: SortOrder
    MEANINGS?: SortOrder
    USERINFO?: USERINFOOrderByWithRelationInput
  }

  export type VOCABWhereUniqueInput = Prisma.AtLeast<{
    U_ID_WORD?: VOCABU_IDWORDCompoundUniqueInput
    AND?: VOCABWhereInput | VOCABWhereInput[]
    OR?: VOCABWhereInput[]
    NOT?: VOCABWhereInput | VOCABWhereInput[]
    U_ID?: IntFilter<"VOCAB"> | number
    WORD?: StringFilter<"VOCAB"> | string
    MEANINGS?: StringFilter<"VOCAB"> | string
    USERINFO?: XOR<USERINFOScalarRelationFilter, USERINFOWhereInput>
  }, "U_ID_WORD">

  export type VOCABOrderByWithAggregationInput = {
    U_ID?: SortOrder
    WORD?: SortOrder
    MEANINGS?: SortOrder
    _count?: VOCABCountOrderByAggregateInput
    _avg?: VOCABAvgOrderByAggregateInput
    _max?: VOCABMaxOrderByAggregateInput
    _min?: VOCABMinOrderByAggregateInput
    _sum?: VOCABSumOrderByAggregateInput
  }

  export type VOCABScalarWhereWithAggregatesInput = {
    AND?: VOCABScalarWhereWithAggregatesInput | VOCABScalarWhereWithAggregatesInput[]
    OR?: VOCABScalarWhereWithAggregatesInput[]
    NOT?: VOCABScalarWhereWithAggregatesInput | VOCABScalarWhereWithAggregatesInput[]
    U_ID?: IntWithAggregatesFilter<"VOCAB"> | number
    WORD?: StringWithAggregatesFilter<"VOCAB"> | string
    MEANINGS?: StringWithAggregatesFilter<"VOCAB"> | string
  }

  export type USERINFOCreateInput = {
    USERNAME: string
    PWord: string
    VOCAB?: VOCABCreateNestedManyWithoutUSERINFOInput
  }

  export type USERINFOUncheckedCreateInput = {
    U_ID?: number
    USERNAME: string
    PWord: string
    VOCAB?: VOCABUncheckedCreateNestedManyWithoutUSERINFOInput
  }

  export type USERINFOUpdateInput = {
    USERNAME?: StringFieldUpdateOperationsInput | string
    PWord?: StringFieldUpdateOperationsInput | string
    VOCAB?: VOCABUpdateManyWithoutUSERINFONestedInput
  }

  export type USERINFOUncheckedUpdateInput = {
    U_ID?: IntFieldUpdateOperationsInput | number
    USERNAME?: StringFieldUpdateOperationsInput | string
    PWord?: StringFieldUpdateOperationsInput | string
    VOCAB?: VOCABUncheckedUpdateManyWithoutUSERINFONestedInput
  }

  export type USERINFOCreateManyInput = {
    USERNAME: string
    PWord: string
  }

  export type USERINFOUpdateManyMutationInput = {
    USERNAME?: StringFieldUpdateOperationsInput | string
    PWord?: StringFieldUpdateOperationsInput | string
  }

  export type USERINFOUncheckedUpdateManyInput = {
    U_ID?: IntFieldUpdateOperationsInput | number
    USERNAME?: StringFieldUpdateOperationsInput | string
    PWord?: StringFieldUpdateOperationsInput | string
  }

  export type VOCABCreateInput = {
    WORD: string
    MEANINGS: string
    USERINFO: USERINFOCreateNestedOneWithoutVOCABInput
  }

  export type VOCABUncheckedCreateInput = {
    U_ID: number
    WORD: string
    MEANINGS: string
  }

  export type VOCABUpdateInput = {
    WORD?: StringFieldUpdateOperationsInput | string
    MEANINGS?: StringFieldUpdateOperationsInput | string
    USERINFO?: USERINFOUpdateOneRequiredWithoutVOCABNestedInput
  }

  export type VOCABUncheckedUpdateInput = {
    U_ID?: IntFieldUpdateOperationsInput | number
    WORD?: StringFieldUpdateOperationsInput | string
    MEANINGS?: StringFieldUpdateOperationsInput | string
  }

  export type VOCABCreateManyInput = {
    U_ID: number
    WORD: string
    MEANINGS: string
  }

  export type VOCABUpdateManyMutationInput = {
    WORD?: StringFieldUpdateOperationsInput | string
    MEANINGS?: StringFieldUpdateOperationsInput | string
  }

  export type VOCABUncheckedUpdateManyInput = {
    U_ID?: IntFieldUpdateOperationsInput | number
    WORD?: StringFieldUpdateOperationsInput | string
    MEANINGS?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type VOCABListRelationFilter = {
    every?: VOCABWhereInput
    some?: VOCABWhereInput
    none?: VOCABWhereInput
  }

  export type VOCABOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type USERINFOCountOrderByAggregateInput = {
    U_ID?: SortOrder
    USERNAME?: SortOrder
    PWord?: SortOrder
  }

  export type USERINFOAvgOrderByAggregateInput = {
    U_ID?: SortOrder
  }

  export type USERINFOMaxOrderByAggregateInput = {
    U_ID?: SortOrder
    USERNAME?: SortOrder
    PWord?: SortOrder
  }

  export type USERINFOMinOrderByAggregateInput = {
    U_ID?: SortOrder
    USERNAME?: SortOrder
    PWord?: SortOrder
  }

  export type USERINFOSumOrderByAggregateInput = {
    U_ID?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type USERINFOScalarRelationFilter = {
    is?: USERINFOWhereInput
    isNot?: USERINFOWhereInput
  }

  export type VOCABU_IDWORDCompoundUniqueInput = {
    U_ID: number
    WORD: string
  }

  export type VOCABCountOrderByAggregateInput = {
    U_ID?: SortOrder
    WORD?: SortOrder
    MEANINGS?: SortOrder
  }

  export type VOCABAvgOrderByAggregateInput = {
    U_ID?: SortOrder
  }

  export type VOCABMaxOrderByAggregateInput = {
    U_ID?: SortOrder
    WORD?: SortOrder
    MEANINGS?: SortOrder
  }

  export type VOCABMinOrderByAggregateInput = {
    U_ID?: SortOrder
    WORD?: SortOrder
    MEANINGS?: SortOrder
  }

  export type VOCABSumOrderByAggregateInput = {
    U_ID?: SortOrder
  }

  export type VOCABCreateNestedManyWithoutUSERINFOInput = {
    create?: XOR<VOCABCreateWithoutUSERINFOInput, VOCABUncheckedCreateWithoutUSERINFOInput> | VOCABCreateWithoutUSERINFOInput[] | VOCABUncheckedCreateWithoutUSERINFOInput[]
    connectOrCreate?: VOCABCreateOrConnectWithoutUSERINFOInput | VOCABCreateOrConnectWithoutUSERINFOInput[]
    createMany?: VOCABCreateManyUSERINFOInputEnvelope
    connect?: VOCABWhereUniqueInput | VOCABWhereUniqueInput[]
  }

  export type VOCABUncheckedCreateNestedManyWithoutUSERINFOInput = {
    create?: XOR<VOCABCreateWithoutUSERINFOInput, VOCABUncheckedCreateWithoutUSERINFOInput> | VOCABCreateWithoutUSERINFOInput[] | VOCABUncheckedCreateWithoutUSERINFOInput[]
    connectOrCreate?: VOCABCreateOrConnectWithoutUSERINFOInput | VOCABCreateOrConnectWithoutUSERINFOInput[]
    createMany?: VOCABCreateManyUSERINFOInputEnvelope
    connect?: VOCABWhereUniqueInput | VOCABWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type VOCABUpdateManyWithoutUSERINFONestedInput = {
    create?: XOR<VOCABCreateWithoutUSERINFOInput, VOCABUncheckedCreateWithoutUSERINFOInput> | VOCABCreateWithoutUSERINFOInput[] | VOCABUncheckedCreateWithoutUSERINFOInput[]
    connectOrCreate?: VOCABCreateOrConnectWithoutUSERINFOInput | VOCABCreateOrConnectWithoutUSERINFOInput[]
    upsert?: VOCABUpsertWithWhereUniqueWithoutUSERINFOInput | VOCABUpsertWithWhereUniqueWithoutUSERINFOInput[]
    createMany?: VOCABCreateManyUSERINFOInputEnvelope
    set?: VOCABWhereUniqueInput | VOCABWhereUniqueInput[]
    disconnect?: VOCABWhereUniqueInput | VOCABWhereUniqueInput[]
    delete?: VOCABWhereUniqueInput | VOCABWhereUniqueInput[]
    connect?: VOCABWhereUniqueInput | VOCABWhereUniqueInput[]
    update?: VOCABUpdateWithWhereUniqueWithoutUSERINFOInput | VOCABUpdateWithWhereUniqueWithoutUSERINFOInput[]
    updateMany?: VOCABUpdateManyWithWhereWithoutUSERINFOInput | VOCABUpdateManyWithWhereWithoutUSERINFOInput[]
    deleteMany?: VOCABScalarWhereInput | VOCABScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VOCABUncheckedUpdateManyWithoutUSERINFONestedInput = {
    create?: XOR<VOCABCreateWithoutUSERINFOInput, VOCABUncheckedCreateWithoutUSERINFOInput> | VOCABCreateWithoutUSERINFOInput[] | VOCABUncheckedCreateWithoutUSERINFOInput[]
    connectOrCreate?: VOCABCreateOrConnectWithoutUSERINFOInput | VOCABCreateOrConnectWithoutUSERINFOInput[]
    upsert?: VOCABUpsertWithWhereUniqueWithoutUSERINFOInput | VOCABUpsertWithWhereUniqueWithoutUSERINFOInput[]
    createMany?: VOCABCreateManyUSERINFOInputEnvelope
    set?: VOCABWhereUniqueInput | VOCABWhereUniqueInput[]
    disconnect?: VOCABWhereUniqueInput | VOCABWhereUniqueInput[]
    delete?: VOCABWhereUniqueInput | VOCABWhereUniqueInput[]
    connect?: VOCABWhereUniqueInput | VOCABWhereUniqueInput[]
    update?: VOCABUpdateWithWhereUniqueWithoutUSERINFOInput | VOCABUpdateWithWhereUniqueWithoutUSERINFOInput[]
    updateMany?: VOCABUpdateManyWithWhereWithoutUSERINFOInput | VOCABUpdateManyWithWhereWithoutUSERINFOInput[]
    deleteMany?: VOCABScalarWhereInput | VOCABScalarWhereInput[]
  }

  export type USERINFOCreateNestedOneWithoutVOCABInput = {
    create?: XOR<USERINFOCreateWithoutVOCABInput, USERINFOUncheckedCreateWithoutVOCABInput>
    connectOrCreate?: USERINFOCreateOrConnectWithoutVOCABInput
    connect?: USERINFOWhereUniqueInput
  }

  export type USERINFOUpdateOneRequiredWithoutVOCABNestedInput = {
    create?: XOR<USERINFOCreateWithoutVOCABInput, USERINFOUncheckedCreateWithoutVOCABInput>
    connectOrCreate?: USERINFOCreateOrConnectWithoutVOCABInput
    upsert?: USERINFOUpsertWithoutVOCABInput
    connect?: USERINFOWhereUniqueInput
    update?: XOR<XOR<USERINFOUpdateToOneWithWhereWithoutVOCABInput, USERINFOUpdateWithoutVOCABInput>, USERINFOUncheckedUpdateWithoutVOCABInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type VOCABCreateWithoutUSERINFOInput = {
    WORD: string
    MEANINGS: string
  }

  export type VOCABUncheckedCreateWithoutUSERINFOInput = {
    WORD: string
    MEANINGS: string
  }

  export type VOCABCreateOrConnectWithoutUSERINFOInput = {
    where: VOCABWhereUniqueInput
    create: XOR<VOCABCreateWithoutUSERINFOInput, VOCABUncheckedCreateWithoutUSERINFOInput>
  }

  export type VOCABCreateManyUSERINFOInputEnvelope = {
    data: VOCABCreateManyUSERINFOInput | VOCABCreateManyUSERINFOInput[]
  }

  export type VOCABUpsertWithWhereUniqueWithoutUSERINFOInput = {
    where: VOCABWhereUniqueInput
    update: XOR<VOCABUpdateWithoutUSERINFOInput, VOCABUncheckedUpdateWithoutUSERINFOInput>
    create: XOR<VOCABCreateWithoutUSERINFOInput, VOCABUncheckedCreateWithoutUSERINFOInput>
  }

  export type VOCABUpdateWithWhereUniqueWithoutUSERINFOInput = {
    where: VOCABWhereUniqueInput
    data: XOR<VOCABUpdateWithoutUSERINFOInput, VOCABUncheckedUpdateWithoutUSERINFOInput>
  }

  export type VOCABUpdateManyWithWhereWithoutUSERINFOInput = {
    where: VOCABScalarWhereInput
    data: XOR<VOCABUpdateManyMutationInput, VOCABUncheckedUpdateManyWithoutUSERINFOInput>
  }

  export type VOCABScalarWhereInput = {
    AND?: VOCABScalarWhereInput | VOCABScalarWhereInput[]
    OR?: VOCABScalarWhereInput[]
    NOT?: VOCABScalarWhereInput | VOCABScalarWhereInput[]
    U_ID?: IntFilter<"VOCAB"> | number
    WORD?: StringFilter<"VOCAB"> | string
    MEANINGS?: StringFilter<"VOCAB"> | string
  }

  export type USERINFOCreateWithoutVOCABInput = {
    USERNAME: string
    PWord: string
  }

  export type USERINFOUncheckedCreateWithoutVOCABInput = {
    U_ID?: number
    USERNAME: string
    PWord: string
  }

  export type USERINFOCreateOrConnectWithoutVOCABInput = {
    where: USERINFOWhereUniqueInput
    create: XOR<USERINFOCreateWithoutVOCABInput, USERINFOUncheckedCreateWithoutVOCABInput>
  }

  export type USERINFOUpsertWithoutVOCABInput = {
    update: XOR<USERINFOUpdateWithoutVOCABInput, USERINFOUncheckedUpdateWithoutVOCABInput>
    create: XOR<USERINFOCreateWithoutVOCABInput, USERINFOUncheckedCreateWithoutVOCABInput>
    where?: USERINFOWhereInput
  }

  export type USERINFOUpdateToOneWithWhereWithoutVOCABInput = {
    where?: USERINFOWhereInput
    data: XOR<USERINFOUpdateWithoutVOCABInput, USERINFOUncheckedUpdateWithoutVOCABInput>
  }

  export type USERINFOUpdateWithoutVOCABInput = {
    USERNAME?: StringFieldUpdateOperationsInput | string
    PWord?: StringFieldUpdateOperationsInput | string
  }

  export type USERINFOUncheckedUpdateWithoutVOCABInput = {
    U_ID?: IntFieldUpdateOperationsInput | number
    USERNAME?: StringFieldUpdateOperationsInput | string
    PWord?: StringFieldUpdateOperationsInput | string
  }

  export type VOCABCreateManyUSERINFOInput = {
    WORD: string
    MEANINGS: string
  }

  export type VOCABUpdateWithoutUSERINFOInput = {
    WORD?: StringFieldUpdateOperationsInput | string
    MEANINGS?: StringFieldUpdateOperationsInput | string
  }

  export type VOCABUncheckedUpdateWithoutUSERINFOInput = {
    WORD?: StringFieldUpdateOperationsInput | string
    MEANINGS?: StringFieldUpdateOperationsInput | string
  }

  export type VOCABUncheckedUpdateManyWithoutUSERINFOInput = {
    WORD?: StringFieldUpdateOperationsInput | string
    MEANINGS?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}